

// Definindo pinos e algumas variáveis
const int ledPins[] = {3, 4, 5, 6, 7, 8, 9, 10};  // Pinos onde os LEDs estão conectados (Pinos dos 6 LEDs)
const int buttonPin = 13;                           // Pino do botão
const int buzzerPin = 12;                           // Pino do buzzer
bool a = false;                                     // Variável iterruptora
long x;                                             // Número de piscadas
int p;                                              // Tempo de cada piscada
int c = 0;                                          // LED excolhido

bool z = true;
int counter = 0;
int v = true;

int vitorias = 0;
int chance;
int sorte;


void setup() {
  // Inicializando o pino do botão como entrada
  pinMode(buttonPin, INPUT);

  // Configura o pino do buzzer como saída
  pinMode(buzzerPin, OUTPUT); 

  // Configura os pinos dos LEDs como saída
  for (int i = 0; i < 8; i++) {
    pinMode(ledPins[i], OUTPUT);
  }

  // Inicializando o gerador de números aleatórios
  randomSeed(analogRead(0));  // Gera a semente para números aleatórios

  // Inicializando a comunicação serial a 9600 bps. Isso é necessário para começar a enviar dados ao Serial Monitor
  Serial.begin(9600);

  attachInterrupt(digitalPinToInterrupt(buttonPin), contarPressionamentos, RISING);  
}



void contarPressionamentos() {
  if ((z == true) && (v == true) && (counter >= 1 && counter <= 4)){
    c++;  // Incrementa a "c" sempre que a interrupção ocorre
    v = false;
  } else if ((counter > 4) && ((digitalRead(buttonPin) == LOW) || (digitalRead(buttonPin) == HIGH))) {
    a = !a; 
  } 
}


void loop() {
  for (int counter = 0; counter <= 6;) {

    if (z == true){
  for (int counter = 0; counter <= 6;) {
    Serial.println(counter);         // Mostrar esse número no Serial Monitor
    digitalWrite(ledPins[c], HIGH);  // Acende o respectivo LED

    if (digitalRead(buttonPin) == HIGH) {  // Se o botão for pressionado
      counter++;
      delay(80);
    }

    if ((digitalRead(buttonPin) == LOW) && (counter >= 1 && counter <= 4)) {
      digitalWrite(ledPins[c], LOW);   // Apaga o mesmo
      c++;                             // O "interruptor" marcará 'true'
      tone(buzzerPin, 58);             // Toca a nota correspondente
      delay(60);                       // Espera 60 mili segundos 
      noTone(buzzerPin);               // Deixa de tocar a nota

      if (c == 6) {
        c = 0;
      }
      counter = 0;
    } else if ((counter > 4) && ((digitalRead(buttonPin) == LOW) or (digitalRead(buttonPin) == HIGH))) {
      a = !a;
    }
  }
    } else {
    }
  }
}
